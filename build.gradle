//defaultTasks 'clean','test','aggregate'
group 'serenity-bdd-framework'
version '1.0.0-SNAPSHOT'


buildscript {
    repositories {
        flatDir{
            dirs 'libs'
        }
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.2.2")
        classpath("net.serenity-bdd:serenity-rest-assured:2.2.2")
        classpath("net.serenity-bdd:serenity-emailer:2.1.0")
        classpath("net.bytebuddy:byte-buddy:1.8.22")
        classpath("net.bytebuddy:byte-buddy-agent:1.8.22")
        classpath("org.json:json:20140107")
        classpath("com.googlecode.json-simple:json-simple:1.1.1")


    }
}

repositories{
    flatDir{
        dirs 'libs'
    }
    jcenter()
    mavenLocal()
    mavenCentral()
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'net.serenity-bdd.aggregator'
apply from: "$rootDir/gradle/libraries.gradle"


sourceCompatibility = 1.8
targetCompatibility = 1.8
configurations.all{
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
javadoc{
    classpath+=sourceSets.test.compileClasspath
    source+=sourceSets.test.allJava
    destinationDir = file("${buildDir}/docs/automation-javadoc")
}


dependencies {
    compile fileTree(dir: 'libs', include: '**/*.jar')
    compile libs.logback

    compile libs.test.serenity.core,
            libs.test.serenity.screenplay,
            libs.test.serenity.junit,            
            libs.test.serenity.screenplayWebdriver,
            libs.test.serenity.cucumber,
            libs.test.serenity.rest,
            libs.test.junit,
            libs.test.assertj,
            libs.test.serenity.rest,
            libs.test.json,
            libs.test.jsonsimple,
            libs.test.poi,
            libs.test.poiooxml,
            libs.test.xmlbeans,
            libs.test.mysql,
            libs.test.opencsv,
            libs.test.log4j
}

serenity {
    reports =["email"]
}

gradle.startParameter.continueOnFailure = true

task testNewJar (type:Jar){
    classifier ='tests'
    from sourceSets.test.output
}
test {

    systemProperties System.getProperties()
    testLogging.showStandardStreams = true
    test.reports.getHtml().enabled=false
    test.reports.junitXml.enabled=false
    include 'starter/CucumberTestSuite.class'
}

gradle.startParameter.continueOnFailure = true

test.finalizedBy(aggregate)
